'use strict';

angular.module('app', ['app.services', 'app.directives', 'ngAnimate']);'use strict';

angular.module('app.controllers', ['app.services'])
    .controller('QuickSettingsCtrl', ['$scope', 'quickSettings', 'quickSettingsTexts', '$timeout', function($scope, quickSettings, quickSettingsTexts, $timeout) {        
        quickSettings.adjustByTime($scope.isOpen);
        $scope.settings = quickSettings.getSettings();

        $scope.txts = quickSettingsTexts.getTexts();

        $scope.currentTime = (new Date).getTime();

        $scope.ctrls = {
            SET: 13,
            EXIT: 27,
            UP: 38,
            DOWN: 40,
            LEFT: 37,
            RIGHT: 39
        };

        $scope.animationBlock = false;
        function unblockAnimation (delay) {
            $timeout(function() {
                $scope.animationBlock = false;
            }, delay);
        }


        $scope.isOpen = false;
        $scope.toggleOpen = function() {
            $scope.isOpen = !$scope.isOpen;

            quickSettings.adjustByTime($scope.isOpen);

            if(!$scope.isOpen) {
                $timeout.cancel($scope.closePromise);
            }
        };

        $scope.selectSetting = function() {
            // Second is always the active one
            var activeSetting = $scope.settings[2];

            if(activeSetting.widget === 'slider') {
                $scope.applySettings();
            } else {
                $scope.toggleSetting(activeSetting);
                $scope.applySettings();
            }
        };

        $scope.discardSettings = function() {
            $timeout(function () {
                quickSettings.restoreSettings();
                quickSettings.adjustByTime($scope.isOpen);
            }, 0);
            
        };

        $scope.applySettings = function() {
            quickSettings.setActiveSettings();
        };

        $scope.toggleSetting = function (activeSetting) {
            activeSetting.state.active = !activeSetting.state.active;
        };


        $scope.settingsPrev = function() {
            if($scope.animationBlock) return;
            $scope.animationBlock = true;

            var last = angular.copy($scope.settings[$scope.settings.length - 1]);            
            $scope.settings.unshift(last);

            $timeout(function () {
                $scope.settings.pop();
                unblockAnimation(300);
            }, 0);
        };

        $scope.settingsNext = function() {
            if($scope.animationBlock) return;
            $scope.animationBlock = true;

            var first = angular.copy( $scope.settings[0] );            
            $scope.settings.shift();

            $timeout(function () {
                $scope.settings.push(first);
                unblockAnimation(300);
            }, 0);
        };

        $scope.switchSettingValue = function(direction) {
            var activeSetting = $scope.settings[2];

            if(activeSetting.widget != 'slider') {
                return;
            }

            var currIdx = activeSetting.items.indexOf(activeSetting.state.active);

            if(direction === 'next') {
                currIdx++;
                if(currIdx >= activeSetting.items.length) {
                    currIdx = 0;
                }
            } else if(direction === 'prev') {
                currIdx--;
                if(currIdx < 0) {
                    currIdx = activeSetting.items.length - 1;
                }
            }

            activeSetting.state.active = activeSetting.items[currIdx];

            if(activeSetting.name === 'sleepTimer') {
                activeSetting.state.timestamp = (new Date ()).getTime() + activeSetting.state.active * 60 * 1000;
                quickSettings.adjustByTime(false);
            }
        };

        $scope.closeTimer = function (delay) {
            if($scope.closePromise) {
                $timeout.cancel($scope.closePromise);
            }

            $scope.closePromise = $timeout($scope.toggleOpen, delay);
        };

    }]);'use strict';


angular.module('app.directives', ['app.controllers'])
    .directive('popupQuickSettings', ['$document', function($document) {
        return {
            restrict: 'E',
            replace: true,
            scope: true,
            controller: 'QuickSettingsCtrl',
            link: function(scope, element, attrs) {
                var delay = parseInt(attrs.closeTimer) * 1000;

                $document.bind('keydown', function (event) {
                    if(event.which === scope.ctrls.SET) {

                        if(scope.isOpen) {
                            scope.$apply(scope.selectSetting);
                        } else {
                            scope.$apply( scope.closeTimer(delay) );
                        }

                        scope.$apply(scope.toggleOpen);

                    } else if(event.which === scope.ctrls.EXIT) {
                        scope.closeTimer(delay);

                        if(scope.isOpen) {
                            scope.$apply(function() {
                                scope.discardSettings();
                                scope.toggleOpen();
                            });
                        }

                    } else if(event.which === scope.ctrls.UP) {
                        scope.closeTimer(delay);
                        event.preventDefault();

                        scope.settingsPrev();
                        scope.$apply(scope.discardSettings);

                    } else if(event.which === scope.ctrls.DOWN) {
                        scope.closeTimer(delay);
                        event.preventDefault();

                        scope.settingsNext();
                        scope.$apply(scope.discardSettings);

                    } else if(event.which === scope.ctrls.LEFT) {
                        scope.closeTimer(delay);
                        event.preventDefault();

                        scope.$apply(scope.switchSettingValue('prev'));
                        
                    } else if(event.which === scope.ctrls.RIGHT) {
                        scope.closeTimer(delay);
                        event.preventDefault();
                        
                        scope.$apply(scope.switchSettingValue('next'));
                        
                    }
                });
            },
            templateUrl: 'template/popup_quick_settings.html'
        }
    }]);'use strict';
'use strict';

angular.module('app.services', ['LocalStorageModule'])
    .factory('quickSettings', ['localStorageService', function(lsService) {
        function getIdxByName (name) {
            var idx = -1;
            settings 
            for (var i = settings.length - 1; i >= 0; i--) {
                if(settings[i].name === name) {
                    idx = i;
                    break;
                }
            };
            return idx;
        }

        function extendSettings (settings, avaliableSettings) {
            for (var i = settings.length - 1; i >= 0; i--) {
                settings[i].state = avaliableSettings[settings[i].name];                
            };

            return settings;
        }

        function removeTempItem (idx) {
            if(settings[idx].tempItem) {
                settings[idx].items.splice(settings[idx].tempItem, 1);
                settings[idx].tempItem = false;
            }
        }

        function addTempItem (idx) {
            var timestamp = settings[idx].state.timestamp,
                timeleft = parseInt( (timestamp - new Date()) / 1000 / 60 );

            if(settings[idx].tempItem) {
                removeTempItem(idx);
            }

            if(timeleft > 0) {
                if(settings[idx].items.indexOf(timeleft) === -1) {
                    settings[idx].items.push(timeleft);
                    settings[idx].items.sort(function(a, b) {return a - b;});
                    settings[idx].tempItem = settings[idx].items.indexOf(timeleft);
                }
                settings[idx].state.active = timeleft;
            } else {
                settings[idx].state.active = 'OFF';
            } 
        }

        var settings = [
                {
                    name: 'recording'
                },
                {
                    name: 'language',
                    widget: 'slider',
                    items: ['English', 'Español', 'Français']
                },
                {
                    name: 'sleepTimer',
                    widget: 'slider',
                    items: ['OFF', 5, 15, 30, 45, 60, 75, 90, 105, 120, 180, 240],
                    showCurrent: true
                },
                {
                    name: 'parentalControl'
                },
                {
                    name: 'favoriteChannel'
                }
            ],
            factory = {
                getSettings: function() {
                    return settings;
                },
                getActiveSettings: function () {
                    return lsService.get('quickSettings');
                },
                setActiveSettings: function(data) {
                    lsService.set('quickSettings', data || activeSettings);
                },
                restoreSettings: function() {
                    activeSettings = factory.getActiveSettings()
                    extendSettings(settings, activeSettings);
                },
                adjustByTime: function (isOpen) {
                    var sleepTimerIdx = getIdxByName('sleepTimer');

                    if(!settings[sleepTimerIdx].state.timestamp) {
                        return;
                    }

                    if(isOpen) {
                        addTempItem(sleepTimerIdx);                
                    } else {
                        removeTempItem(sleepTimerIdx);
                    }
                }
            },
            activeSettings = factory.getActiveSettings();

        if( !activeSettings ) {
            activeSettings = {
                recording: {
                    active: false
                },
                favoriteChannel: {
                    active: false
                },
                language: {
                    active: 'English'
                },
                sleepTimer: {
                    active: 'OFF',
                    timestamp: null
                },
                parentalControl: {
                    active: false
                }
            };

            factory.setActiveSettings(activeSettings);
        }

        extendSettings(settings, activeSettings);

        return factory;
    }])
    .factory('quickSettingsTexts', function () {
        var callSign = 'WSCBS',
            channelNumber = 2,
            factory = {
                getTexts: function(options) {
                    return {
                        'recording_enabled': 'Stop recording ' + callSign + ' ' + channelNumber + ' now',
                        'recording_disabled':'Start recording ' + callSign + ' ' + channelNumber + ' now',
                        'favoriteChannel_enabled': 'Remove ' + callSign + ' ' + channelNumber + ' from Favorites List',
                        'favoriteChannel_disabled':'Add ' + callSign + ' ' + channelNumber + ' to Favorites List',
                        'language_text': 'Choose SAP language',
                        'sleepTimer_text': 'Set Sleep Timer  (minutes)',
                        'parentalControl_enabled': 'Turn OFF Parental Control',
                        'parentalControl_disabled': 'Turn ON Parental Control'
                    };
                }
            };

        return factory;
    });angular.module('app').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('template/popup_quick_settings.html',
    "<div class=\"popup_wrap\" ng-show=\"isOpen\">\r" +
    "\n" +
    "    <div class=\"popup_fone\"></div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "    <section class=\"popup_window popup_quick_settings\">\r" +
    "\n" +
    "        <header class=\"quick_settings_header\">\r" +
    "\n" +
    "            <h1 class=\"quick_settings_title\">Quick Settings</h1>\r" +
    "\n" +
    "            <div class=\"quick_settings_descr\">Highlight an option, then press SELECT</div>\r" +
    "\n" +
    "        </header>\r" +
    "\n" +
    "        \r" +
    "\n" +
    "        <section class=\"quick_settings_content\">\r" +
    "\n" +
    "            <ul class=\"quick_settings_list\">\r" +
    "\n" +
    "                <li \r" +
    "\n" +
    "                    class=\"quick_settings_item {{'idx_'+ $index}} {{'inner_' + setting.widget}}\"\r" +
    "\n" +
    "                    ng-repeat=\"setting in settings | limitTo:5\" \r" +
    "\n" +
    "                    ng-switch=\"setting.widget\"\r" +
    "\n" +
    "                >\r" +
    "\n" +
    "                    <span class=\"quick_settings_item_name\" ng-switch-default=\"\">\r" +
    "\n" +
    "                        {{setting.state.active ? txts[setting.name + '_enabled'] : txts[setting.name + '_disabled']}}\r" +
    "\n" +
    "                    </span>\r" +
    "\n" +
    "\r" +
    "\n" +
    "                    <span class=\"quick_settings_item_name\" ng-switch-when=\"slider\">\r" +
    "\n" +
    "                        {{txts[setting.name + '_text']}}\r" +
    "\n" +
    "                    </span>\r" +
    "\n" +
    "\r" +
    "\n" +
    "                    <span class=\"quick_settings_item_value\" ng-if=\"setting.showCurrent && setting.state.active != 'OFF'\">\r" +
    "\n" +
    "                        {{setting.state.active}}\r" +
    "\n" +
    "                    </span>\r" +
    "\n" +
    "\r" +
    "\n" +
    "                    <div class=\"quick_settings_value_block\" ng-switch-when=\"slider\">\r" +
    "\n" +
    "                        <ul class=\"quick_settings_value_list\">\r" +
    "\n" +
    "                            <li class=\"quick_settings_value_item {{setting.state.active === item ? 'active' : ''}}\" ng-repeat=\"item in setting.items\">\r" +
    "\n" +
    "                                {{item}}\r" +
    "\n" +
    "                            </li>\r" +
    "\n" +
    "                        </ul>\r" +
    "\n" +
    "\r" +
    "\n" +
    "                        <button class=\"quick_settings_value_item_prev\" ng-click=\"switchSettingValue('prev')\"></button>\r" +
    "\n" +
    "                        <button class=\"quick_settings_value_item_next\" ng-click=\"switchSettingValue('next')\"></button>\r" +
    "\n" +
    "                    </div>\r" +
    "\n" +
    "                </li>\r" +
    "\n" +
    "            </ul>\r" +
    "\n" +
    "\r" +
    "\n" +
    "            <button class=\"quick_settings_item_prev\" ng-click=\"settingsPrev()\"></button>\r" +
    "\n" +
    "            <button class=\"quick_settings_item_next\" ng-click=\"settingsNext()\"></button>\r" +
    "\n" +
    "        </section>\r" +
    "\n" +
    "\r" +
    "\n" +
    "        <footer class=\"quick_settings_footer\">\r" +
    "\n" +
    "            <button class=\"button button_set\">\r" +
    "\n" +
    "                <i>SET</i>\r" +
    "\n" +
    "                More Settings\r" +
    "\n" +
    "            </button>\r" +
    "\n" +
    "            <button class=\"button button_exit\">\r" +
    "\n" +
    "                <i>EXIT</i>\r" +
    "\n" +
    "                Return to TV\r" +
    "\n" +
    "            </button>\r" +
    "\n" +
    "        </footer>\r" +
    "\n" +
    "    </section>\r" +
    "\n" +
    "</div>\r" +
    "\n"
  );

}]);
